#!/bin/bash
#
# Copyright 2016 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
#
# Usage:
#   bin/compile <build-dir> <cache-dir> <env-dir>
#
# Notes:
# This script takes the build, cache, and environment directories are arugments.
# Cache is persisted between builds. The full application should be built in the
# build directory. This is a temporary directory that the Heroku built system
# will package into a slug with a different path, so symlinks can cause
# problems.
#
# We circumvent this difficulty by building the deploy jar and copying that to
# the build directory.

# Indents all text by 8 spaces.
indent() {
  sed -u "s/^/       /"
}

# fail fast
set -e

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BAZEL_BUILD_PATH=$(cat ${ENV_DIR}/BAZEL_BUILD_PATH)_deploy.jar


# default to Bazel version 0.3.0
if [[ ! -v BAZEL_VERSION ]]; then
  BAZEL_VERSION="0.23.2"
fi

# install Java 1.8
JVM_BUILDPACK="https://codon-buildpacks.s3.amazonaws.com/buildpacks/heroku/jvm-common.tgz"
JVM_COMMON_BUILDPACK=${JVM_COMMON_BUILDPACK:-${JVM_BUILDPACK}}
echo "-----> Installing Java 8 from ${JVM_COMMON_BUILDPACK}"
mkdir -p /tmp/jvm-common
curl --retry 3 --silent --location $JVM_COMMON_BUILDPACK \
  | tar xzm -C /tmp/jvm-common --strip-components=1
. /tmp/jvm-common/bin/util
. /tmp/jvm-common/bin/java

# Set this environment variable for Bazel, so it can use JDK 1.8.
export JAVA_HOME="${BUILD_DIR}/.jdk"
install_java_with_overlay ${BUILD_DIR} | indent
echo "-----> Installing Java 8: complete"

# Create the CACHE_DIR if it doesn't exist.
if [[ ! -d ${CACHE_DIR} ]]; then
  mkdir ${CACHE_DIR}
fi

# Fetch the Bazel installer
# TODO: consider keeping the Bazel and Java installs in cache.
URL="https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/"
URL+="bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh"
echo "-----> Downloading Bazel from $URL"
export BAZEL_INSTALLER=${CACHE_DIR}/install.sh
curl -L -o "${BAZEL_INSTALLER}" "${URL}"
if [[ $? -ne 0 ]]; then
  echo "download failed" >&2
  exit 1
fi
echo "-----> Downloading Bazel: complete"



# Install Bazel inside ${BASE_PATH}
BASE_PATH="${BUILD_DIR}/bazel"
echo "-----> Installing Bazel into $BASE_PATH"
bash "${BAZEL_INSTALLER}" \
  --base="${BASE_PATH}" \
  --bin="${BASE_PATH}/binary" | indent
echo "-----> Installing Bazel: complete"

# Custom bazelrc file for Docker
echo "-----> Configuring Bazel"
echo -e "\nstartup --batch" >> $BUILD_DIR/bazel.bazelrc
echo -e "\nbuild --spawn_strategy=standalone --genrule_strategy=standalone" \
  >> $BUILD_DIR/bazel.bazelrc

# Build app
echo "-----> Building binary at $BAZEL_BUILD_PATH"
BAZEL="${BASE_PATH}/bin/bazel --bazelrc=${BUILD_DIR}/bazel.bazelrc"
cd $BUILD_DIR
${BAZEL} clean
${BAZEL} build "${BAZEL_BUILD_PATH}"
echo "-----> Building binary: complete"

# Find absolute path to deploy jar. For whatever reason. Heroku doesn't like the
# Bazel symlinks.
BAZEL_BIN=$(ls -l | grep "bazel-bin" | sed "s/.* -> //")

# Copy the deploy jar to the build directory
JAR_PATH=$(echo "$BAZEL_BUILD_PATH" | sed "s/:/\//" | sed "s/\/\///")
echo "-----> Copying jar at $JAR_PATH"
cp ${BAZEL_BIN}/${JAR_PATH} $BUILD_DIR/app.jar
echo "-----> Copying jar: complete"

# Clean up other artifacts so that the slug is smaller
echo "-----> Cleaning up"
${BAZEL} clean
rm -rf ${BUILD_DIR}/bazel
